===========================
$indexOfArray (aggregation)
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $indexOfArray

   Searches an array for an occurence of a specified value and returns
   the array index (zero-based) of the first occurence. If the
   substring is not found, returns ``-1``.

   :expression:`$indexOfArray` has the following :ref:`operator
   expression syntax <agg-quick-ref-operator-expressions>`:

   .. code-block:: javascript

      { $indexOfArray: [ <array expression>, <search expression>, <start>, <end> ] }

   .. COMMENT to DocsTeam: in 3.4 manual, should use the args yaml file as usual.
      
   .. COMMENT to DocsTeam: We're using integral number below instead of
      integer since we can pass in 1.0 or 2.0 etc and they would work

   .. list-table::
      :header-rows: 1
      :widths: 30 65

      * - Operand
        - Description

      * - ``<array expression>``

        - Can be any valid :ref:`expression
          <aggregation-expressions>` as long as it resolves to an
          array. For more information on expressions, see
          :ref:`aggregation-expressions`.

          If the array expression resolves to a value of ``null`` or 
          refers to a field that is missing, :expression:`$indexOfArray` returns ``null``.

          If the array expression does not resolve to an array or ``null`` nor 
          refers to a missing field, :expression:`$indexOfArray` returns an error.

      * - ``<search expression>``
        - Can be any valid :ref:`expression
          <aggregation-expressions>`. For more information on expressions, see
          :ref:`aggregation-expressions`.

      * - ``<start>`` 

        - *Optional* An integral number that specifies the starting index
          position for the search. Can be any valid
          :ref:`expression <aggregation-expressions>` that resolves to
          a non-negative integral number.

      * - ``<end>`` 

        - *Optional* An integral number that specifies the ending index
          position for the search. Can be any valid
          :ref:`expression <aggregation-expressions>` that resolves to
          a non-negative integral number. If you specify a ``<end>`` index
          value, you should also specify a ``<start>`` index value;
          otherwise, :expression:`$indexOfArray` uses the ``<end>``
          value as the ``<start>`` index value instead of the ``<end>``
          value.

Behavior
--------

- If ``<array expression>`` is null, :expression:`$indexOfArray` returns ``null``.

- If :expression:`$indexOfArray` is called on a field that doesn't exist in the document, :expression:`$indexOfArray` returns ``null``.

- If ``<array expression>`` is not an array and not null, :expression:`$indexOfArray` returns an error.

- If ``<start>`` or ``<end>`` is a negative number, :expression:`$indexOfArray` returns an error.

- If ``<start>`` is a number greater than ``<end>``, :expression:`$indexOfArray` returns ``-1``.

- If ``<start>`` is a number greater than the array-length of the array, :expression:`$indexOfArray` returns ``-1``.

- If ``<start>`` or ``<end>`` is given a value that is not an integral number, :expression:`$indexOfArray` returns an error.

- If the ``<search expression>`` is found multiple times within the ``<array expression>``, then :expression:`$indexOfArray` returns the index of the first ``<search expression>`` found.

Some short examples to highlight different behavior:

 .. list-table::
    :header-rows: 1
    :widths: 95 5

    * - Example
      - Results

    * - ``{ $indexOfArray: [ [ "a", "abc" ] , "a" ] }``
      - ``0``

    * - ``{ $indexOfArray: [ [ "a", "abc", "de", ["de"] ], ["de"] ] }``
      - ``3``

    * - ``{ $indexOfArray: [ [ 1, 2 ], 5 ] }``
      - ``-1``

    * - ``{ $indexOfArray: [ [ 1, 2, 3 ], [1, 2] ] }``
      - ``-1``

    * - ``{ $indexOfArray: [ [ 10, 9, 9, 8, 9 ], 9, 3 ] }``
      - ``4``

    * - ``{ $indexOfArray: [ [ "a", "abc", "b" ] , "b", 0, 1 ] }``
      - ``-1``

    * - ``{ $indexOfArray: [ [ "a", "abc", "b" ] , "b", 1, 0 ] }``
      - ``-1``

    * - ``{ $indexOfArray: [ [ "a", "abc", "b" ] , "b", 20 ] }``
      - ``-1``

    * - ``{ $indexOfArray: [ [ null, null, null ] , null ] }``
      - ``0``
    
    * - ``{ $indexOfArray: [ null , 'foo' ] }``
      - ``null``

Examples
--------

Consider an ``inventory`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "items" : ["one", "two", "three"] }
   { "_id" : 2, "items" : [1, 2, 3] }
   { "_id" : 3, "items" : [null, null, 2] }
   { "_id" : 4, "items" : null }
   { "_id" : 5, "amount" : 3 }

The following operation uses the :expression:`$indexOfArray` operator to
return the array index at which the string ``foo`` is located in each ``items`` array:

.. code-block:: javascript

   db.inventory.aggregate(
      [
        {
          $project:
             {
               index: { $indexOfArray: [ "$items", 2 ] },
             }
         }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "index" : "-1" }
   { "_id" : 2, "index" : "1" }
   { "_id" : 3, "index" : "2" }
   { "_id" : 4, "index" : null }
   { "_id" : 5, "index" : null }


.. seealso:: :expression:`$indexOfBytes` and :expression:`$indexOfCP`
