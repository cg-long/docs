===========================
$indexOfCP (aggregation)
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $indexOfCP

   Searches a string for an occurence of a substring and returns the
   UTF-8 `code point <http://www.unicode.org/glossary/#code_point>`_
   index (zero-based) of the first occurence. If the
   substring is not found, returns ``-1``.

   :expression:`$indexOfCP` has the following :ref:`operator
   expression syntax <agg-quick-ref-operator-expressions>`:

   .. code-block:: javascript

      { $indexOfCP: [ <string expression>, <substring expression>, <start>, <end> ] }

   .. list-table::
      :header-rows: 1
      :widths: 30 65

      * - Operand
        - Description

      * - ``<string expression>``

        - Can be any valid :ref:`expression
          <aggregation-expressions>` as long as it resolves to a
          string. For more information on expressions, see
          :ref:`aggregation-expressions`.

          If the string expression resolves to a value of ``null`` or 
          refers to a field that is missing, :expression:`$indexOfCP` returns ``null``.

          If the string expression does not resolve to a string or ``null`` nor 
          refers to a missing field, :expression:`$indexOfCP` returns an error.

      * - ``<substring expression>``
        - Can be any valid :ref:`expression
          <aggregation-expressions>` as long as it resolves to a
          string. For more information on expressions, see
          :ref:`aggregation-expressions`.

      * - ``<start>`` 

        - *Optional* An integral number that specifies the starting index
          position for the search. Can be any valid
          :ref:`expression <aggregation-expressions>` that resolves to
          a non-negative integral number.

      * - ``<end>`` 

        - *Optional* An integral number that specifies the ending index
          position for the search. Can be any valid
          :ref:`expression <aggregation-expressions>` that resolves to
          a non-negative integral number. If you specify a ``<end>`` index
          value, you should also specify a ``<start>`` index value;
          otherwise, :expression:`$indexOfCP` uses the ``<end>``
          value as the ``<start>`` index value instead of the ``<end>``
          value.

Behavior
--------

- If ``<string expression>`` is null, :expression:`$indexOfCP` returns ``null``.

- If :expression:`$indexOfCP` is called on a field that doesn't exist in the document, :expression:`$indexOfCP` returns ``null``.

- If ``<string expression>`` is not a string and not null, :expression:`$indexOfCP` returns an error.

- If ``<substring expression>`` is null, :expression:`$indexOfCP` returns an error.

- If ``<start>`` or ``<end>`` is a negative number, :expression:`$indexOfCP` returns an error.

- If ``<start>`` is a number greater than ``<end>``, :expression:`$indexOfCP` returns ``-1``.

- If ``<start>`` is a number greater than the byte length of the string, :expression:`$indexOfCP` returns ``-1``.

- If ``<start>`` or ``<end>`` is given a value that is not an integer, :expression:`$indexOfCP` returns an error.

- If the ``<substring expression>`` is found multiple times within the ``<string expression>``, then :expression:`$indexOfCP` returns the index of the first ``<substring expression>`` found.

Some short examples to highlight different behavior:

.. list-table::
  :header-rows: 1
  :widths: 95 5

  * - Example
    - Results

  * - ``{ $indexOfCP: [ "cafeteria", "e" ] }``
    - ``3``

  * - ``{ $indexOfCP: [ "cafétéria", "é" ] }``
    - ``3``

  * - ``{ $indexOfCP: [ "cafétéria", "e" ] }``
    - ``-1``

  * - ``{ $indexOfCP: [ "cafétéria", "t" ] }``
    - ``4``

  * - ``{ $indexOfCP: [ "foo.bar.fi", ".", 5 ] }``
    - ``7``

  * - ``{ $indexOfCP: [ "vanilla", "ll", 0, 2 ] }``
    - ``-1``

  * - ``{ $indexOfCP: [ "vanilla", "ll", -1 ] }``
    - ``-1``

  * - ``{ $indexOfCP: [ "vanilla", "ll", 12 ] }``
    - ``-1``

  * - ``{ $indexOfCP: [ "vanilla", "ll", 5, 2 ] }``
    - ``-1``

  * - ``{ $indexOfCP: [ "vanilla", "nilla", 3 ] }``
    - ``-1``

  * - ``{ $indexOfCP: [ null, "foo" ] }``
    - ``null``

Examples
--------

Consider an ``inventory`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "foo" }
   { "_id" : 2, "item" : "fóofoo" }
   { "_id" : 3, "item" : "the foo bar" }
   { "_id" : 4, "item" : "hello world fóo" }
   { "_id" : 5, "item" : null }
   { "_id" : 6, "amount" : 3 }

The following operation uses the :expression:`$indexOfCP` operator to
return the code point index at which the string ``foo`` is located in
each ``item`` string:

.. code-block:: javascript

   db.inventory.aggregate(
      [
        {
          $project:
             {
               cpLocation: { $indexOfCP: [ "$item", "foo" ] },
             }
         }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "cpLocation" : "0" }
   { "_id" : 2, "cpLocation" : "3" }
   { "_id" : 3, "cpLocation" : "4" }
   { "_id" : 4, "cpLocation" : "-1" }
   { "_id" : 5, "cpLocation" : null }
   { "_id" : 6, "cpLocation" : null }


.. seealso:: :expression:`$indexOfBytes` and :expression:`$indexOfArray`
